# -*- coding: utf-8 -*-
"""Practical No 5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bP35JRgDFesNyRgAsWYee_MaC0GcTvwM
"""

def is_safe(board, row, col):
    # Check if there is a queen in the same column
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check if there is a queen in the upper left diagonal
    i = row - 1
    j = col - 1
    while i >= 0 and j >= 0:
        if board[i][j] == 1:
            return False
        i -= 1
        j -= 1

    # Check if there is a queen in the upper right diagonal
    i = row - 1
    j = col + 1
    while i >= 0 and j < len(board):
        if board[i][j] == 1:
            return False
        i -= 1
        j += 1

    return True

def solve_n_queens_util(board, row):
    if row == len(board):
        # All queens have been placed, print the solution
        for i in range(len(board)):
            for j in range(len(board)):
                print(board[i][j], end=" ")
            print()
        print()
        return

    for col in range(len(board)):
        if is_safe(board, row, col):
            # Place the queen in the current position
            board[row][col] = 1

            # Recur for the next row
            solve_n_queens_util(board, row + 1)

            # Backtrack and remove the queen from the current position
            board[row][col] = 0

def solve_n_queens(n):
    board = [[0] * n for _ in range(n)]
    solve_n_queens_util(board, 0)

# Test the function
solve_n_queens(4)